from aiogram.dispatcher import FSMContext
from aiogram import types
from loader import dp

from loguru import logger

from .parse_state import ParseFormState
from modules.parse_vk_group import VkParser

from keyboards.reply.cancel_state_keyboard import cancel_state_keyboard
from keyboards.reply.menu_keyboard import main_keyboard
from handlers.cancel_state_handler import cancel_handler


@dp.message_handler(commands='parse', state=None)
@dp.message_handler(regexp='^(üî® –°–ø–∞—Ä—Å–∏—Ç—å –≥—Ä—É–ø–ø—É)$')
async def cm_stats(message: types.Message):
    await ParseFormState.name.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏', reply_markup=await cancel_state_keyboard())


@dp.message_handler(state=ParseFormState.name, content_types=['text'])
async def load_name(message: types.Message, state: FSMContext):
    text = message.text
    parser_vk = VkParser()

    if len(text.split()) == 1:
        group = text.split()[0]
        text = f'–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã <b>{group}</b> –∑–∞–∫–æ–Ω—á–∏–ª—Å—è'
        logger.info(f'–ù–∞—á–∞–ª—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {group}')
        await message.answer('–ù–∞—á–∞–ª—Å—è —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ...')
        await parser_vk.run_vk_parser(group)
        logger.info(f'–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {group} –∑–∞–∫–æ–Ω—á–µ–Ω')
    else:
        text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.'

    await message.answer(text=text, reply_markup=await main_keyboard())
    await state.finish()
