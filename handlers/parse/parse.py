from loader import dp
from loguru import logger
from aiogram import types

from .parse_state import ParseFormState
from modules.parse_vk_group import VkParser
from aiogram.dispatcher import FSMContext

from keyboards.reply.cancel_state_keyboard import cancel_state_keyboard
from keyboards.reply.menu_keyboard import main_keyboard

from handlers.cancel_state_handler import cancel_handler


@dp.message_handler(commands="parse", state=None)
@dp.message_handler(regexp="^(üî® –°–ø–∞—Ä—Å–∏—Ç—å –≥—Ä—É–ø–ø—É)$")
async def cm_stats(message: types.Message):
    await ParseFormState.name.set()
    await message.reply(
        "‚å® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏\n\n"
        "‚ùó –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è, –æ–∂–∏–¥–∞–π—Ç–µ...",
        reply_markup=await cancel_state_keyboard(),
    )


@dp.message_handler(state=ParseFormState.name, content_types=["text"])
async def load_name(message: types.Message, state: FSMContext):
    text = message.text.lower()
    parser_vk = VkParser()

    if len(text.split()) == 1:
        group = text.split()[0]

        # –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥—Ä—É–ø–ø—ã
        is_parsing = await parser_vk.run_vk_parser(group)

        if is_parsing:
            logger.info(f"–ù–∞—á–∞–ª—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {group}")
            await message.answer(
                text="‚ùï –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã", reply_markup=await main_keyboard()
            )
        else:
            await message.answer(
                text=f"‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã <b>{group}</b>",
                reply_markup=await main_keyboard(),
            )
    await state.finish()
