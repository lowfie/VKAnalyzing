from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp

from datetime import datetime, timedelta

from database import Analytics
from database.models import Group, Post

from loguru import logger

from keyboards.reply.cancel_state_keyboard import cancel_state_keyboard
from keyboards.reply.menu_keyboard import main_keyboard
from keyboards.inline.choose_date_period import choice_date_period_keyboards

from .statistics_state import StatisticsFormState
from handlers.cancel_state_handler import cancel_handler


@dp.message_handler(commands="stats", state=None)
@dp.message_handler(regexp="^(üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$")
async def cm_stats(message: types.Message):
    await StatisticsFormState.name.set()
    await message.reply(
        "‚å® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏",
        reply_markup=await cancel_state_keyboard()
    )


@dp.message_handler(state=StatisticsFormState.name, content_types=["text"])
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text.lower()

    await message.reply(
        "‚å® –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        reply_markup=await choice_date_period_keyboards()
    )
    await StatisticsFormState.next()


@dp.callback_query_handler(state=StatisticsFormState.choice_date_period, text_contains='choice')
async def choice_data_period(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["choice"] = call.data

        if data["choice"] == "choicePeriod":
            await dp.bot.send_message(
                call.from_user.id,
                "‚å® –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ <b>(–≤ –¥–Ω—è—Ö)</b>",
                reply_markup=await cancel_state_keyboard()
            )
        else:
            await dp.bot.send_message(
                call.from_user.id,
                "‚å® –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
                "‚ùó –§–æ—Ä–º–∞—Ç: <b>–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥</b>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <b><i>20.10.2022</i></b>",
                reply_markup=await cancel_state_keyboard()
            )

    await StatisticsFormState.next()


@dp.message_handler(state=StatisticsFormState.days, content_types=["text"])
async def load_period(message: types.Message, state: FSMContext):
    analysis = Analytics(group=Group, post=Post)
    async with state.proxy() as data:
        date = await get_correct_date(data["choice"], message.text)

        if date is None:
            await message.reply(
                "‚ùó –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                reply_markup=await main_keyboard())
            await state.finish()
            return
        else:
            data["date"] = date

        try:
            statistics = analysis.get_statistic(data)
        except TypeError as err:
            logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —ç—Ç—É –¥–∞—Ç—É: {err}")
            await message.reply(
                "‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —ç—Ç—É –¥–∞—Ç—É",
                reply_markup=await main_keyboard())
            await state.finish()
            return

        if statistics is not None and statistics["count_post"] > 0:
            if data["choice"] == "choicePeriod":
                statistics["to_date"] = statistics["date_last_post"]

            text = (
                f'<b>‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n'
                f'<b>{statistics["group_name"]}: {statistics["group_members"]}</b>\n\n'
                f'–°–æ–±—Ä–∞–Ω–æ <b>{statistics["count_post"]}</b> –ø–æ—Å—Ç–∞\n'
                f'–ü–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ: <b>{statistics["posts_with_photo"]}</b>\n'
                f'–õ–∞–π–∫–∏: <b>{statistics["likes"]}</b>\n'
                f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: <b>{statistics["comments"]}</b>\n'
                f'–†–µ–ø–æ—Å—Ç—ã: <b>{statistics["reposts"]}</b>\n'
                f'–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <b>{statistics["views"]}</b>\n\n'
                f'–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: <b>{statistics["er_users"]}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π <b>(+{statistics["engagement_rate"]}%)</b>\n\n'
                f'–ü–µ—Ä–∏–æ–¥: <b>{statistics["from_date"]} ‚Äî {statistics["to_date"]}</b>'
            )
        elif statistics is not None and statistics["count_post"] == 0:
            text = (
                f"‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –±–æ–ª—å—à–µ"
            )
        else:
            text = (
                f'‚ùó –ì—Ä—É–ø–ø—ã <b>{data["name"]}</b> –Ω–µ—Ç—É –≤ –±–∞–∑–µ\n\n'
                f"–í—ã –º–æ–∂–µ—Ç–µ –µ—ë –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å <code>/parse</code>"
            )

        await message.answer(text=text, reply_markup=await main_keyboard())
        await state.finish()


async def get_correct_date(choice: str, message: str) -> None | str:
    if choice == "choicePeriod":
        try:
            if len(message) > 5:
                raise ValueError
            days_datetime = timedelta(days=abs(int(message)))
        except ValueError as err:
            logger.warning(f"–í –∫–æ–º–∞–Ω–¥–µ /tops —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞: {err}")
            return None
        return str(datetime.now() - days_datetime)[:-7]
    else:
        try:
            date = datetime.strptime(message, "%d.%m.%Y")
        except (ValueError, OverflowError) as err:
            logger.warning(f"–í –∫–æ–º–∞–Ω–¥–µ /tops —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–∞—Ç—ã: {err}")
            return None
        return str(date)
