from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp

from datetime import datetime, timedelta

from database import Analytics
from database.models import Group, Post

from loguru import logger

from keyboards.reply.cancel_state_keyboard import cancel_state_keyboard
from keyboards.reply.menu_keyboard import main_keyboard

from .statistics_state import StatisticsFormState
from handlers.cancel_state_handler import cancel_handler


@dp.message_handler(commands='stats', state=None)
@dp.message_handler(regexp='^(üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$')
async def cm_stats(message: types.Message):
    await StatisticsFormState.name.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏', reply_markup=await cancel_state_keyboard())


@dp.message_handler(state=StatisticsFormState.name, content_types=['text'])
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ –¥–Ω—è—Ö)', reply_markup=await cancel_state_keyboard())
    await StatisticsFormState.next()


@dp.message_handler(state=StatisticsFormState.days, content_types=['text'])
async def load_period(message: types.Message, state: FSMContext):
    analysis = Analytics(group=Group, post=Post)
    async with state.proxy() as data:
        try:
            days = timedelta(days=int(message.text))
        except (OverflowError, ValueError) as err:
            logger.warning(f'–í –∫–æ–º–∞–Ω–¥–µ /stats —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞: {err}')
            await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ–¥–µ–ª—è, –∫–∞–∫ –ø–µ—Ä–∏–æ–¥')
            days = timedelta(days=7)

        data['date'] = str(datetime.now() - days)[:-7]

        statistics = analysis.get_statistic(data)

        if statistics is not None and statistics['count_post'] > 0:
            text = f'–°–æ–±—Ä–∞–Ω–æ <b>{statistics["count_post"]}</b> –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥\n' \
                   f'–ü–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ: <b>{statistics["posts_with_photo"]}</b>\n' \
                   f'–õ–∞–π–∫–∏: <b>{statistics["likes"]}</b>\n' \
                   f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: <b>{statistics["comments"]}</b>\n' \
                   f'–†–µ–ø–æ—Å—Ç—ã: <b>{statistics["reposts"]}</b>\n' \
                   f'–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <b>{statistics["views"]}</b>'
        elif statistics is not None and statistics['count_post'] == 0:
            text = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å\n' \
                   f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –±–æ–ª—å—à–µ'
        else:
            text = f'–ì—Ä—É–ø–ø—ã <b>{data["name"]}</b> –Ω–µ—Ç—É –≤ –±–∞–∑–µ\n' \
                   f'–í—ã –º–æ–∂–µ—Ç–µ –µ—ë –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å <code>/parse</code>'

        await message.answer(text=text, reply_markup=await main_keyboard())
        await state.finish()
