from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink
from loader import dp

from datetime import datetime, timedelta

from database import Analytics
from database.models import Group, Post

from loguru import logger

from keyboards.reply.cancel_state_keyboard import cancel_state_keyboard
from keyboards.reply.menu_keyboard import main_keyboard

from .tops_state import TopsFormState
from handlers.cancel_state_handler import cancel_handler


@dp.message_handler(commands="tops", state=None)
@dp.message_handler(regexp="^(üìà –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤)$")
async def cm_tops(message: types.Message):
    await TopsFormState.name.set()
    await message.reply(
        "‚å® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏",
        reply_markup=await cancel_state_keyboard(),
    )


@dp.message_handler(state=TopsFormState.name, content_types=["text"])
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text
    await message.reply(
        "‚å® –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ —Ç–æ–ø–æ–≤ (–≤ –¥–Ω—è—Ö)",
        reply_markup=await cancel_state_keyboard(),
    )
    await TopsFormState.next()


@dp.message_handler(state=TopsFormState.days, content_types=["text"])
async def load_period(message: types.Message, state: FSMContext):
    analysis = Analytics(group=Group, post=Post)
    async with state.proxy() as data:
        try:
            days = timedelta(days=abs(int(message.text)))
        except (OverflowError, ValueError) as err:
            logger.warning(f"–í –∫–æ–º–∞–Ω–¥–µ /tops —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞: {err}")
            await message.reply(
                "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–µ–Ω—å, –∫–∞–∫ –ø–µ—Ä–∏–æ–¥"
            )
            days = timedelta(days=1)

        data["date"] = str(datetime.now() - days)[:-7]

        positive_post_list = analysis.get_top_stats(data, Post.positive_comments)
        negative_post_list = analysis.get_top_stats(data, Post.negative_comments)
        popular_post_list = analysis.get_top_stats(data, Post.views)

        if (positive_post_list and negative_post_list and popular_post_list) is not None:
            popular_urls = '\n'.join(f'{hlink(pop_post["number"], pop_post["url"])}' for pop_post in popular_post_list)
            pos_urls = '\n'.join(f'{hlink(pos_post["number"], pos_post["url"])}' for pos_post in positive_post_list)
            neg_urls = '\n'.join(f'{hlink(neg_post["number"], neg_post["url"])}' for neg_post in negative_post_list)

            text = (
                f'<b>‚Äî –¢–æ–ø –ø–æ—Å—Ç–æ–≤</b>\n\n'
                f'<b>–¢–æ–ø {len(popular_post_list)} —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–∞\n</b>' + popular_urls + '\n\n' +
                f'<b>–¢–æ–ø {len(positive_post_list)} —Å–∞–º—ã—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞\n</b>' + pos_urls + '\n\n' +
                f'<b>–¢–æ–ø {len(negative_post_list)} —Å–∞–º—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞\n</b>' + neg_urls + '\n\n'

                f'–ü–µ—Ä–∏–æ–¥: <b>{str(datetime.now())[:-7]} ‚Äî {popular_post_list[0]["to_date"]}</b>'
            )
            parse_mode = "html"
        else:
            text = (
                f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã <b>{data["name"]}</b>\n\n'
                f"–î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–∏–π –ø–µ—Ä–∏–æ–¥\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –Ω–∞–ø–∏—Å–∞–≤ <code>/parse</code>"
            )
            parse_mode = None

        await message.answer(
            text=text,
            disable_web_page_preview=True,
            parse_mode=parse_mode,
            reply_markup=await main_keyboard(),
        )
        await state.finish()
