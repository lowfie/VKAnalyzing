from aiogram.dispatcher import FSMContext
from aiogram import types
from loader import dp

from .autoparse_state import AutoparseFormState

from loguru import logger

from database.services import GroupService
from database.models import Group

from keyboards.reply.cancel_state_keyboard import cancel_state_keyboard
from keyboards.reply.menu_keyboard import main_keyboard
from handlers.cancel_state_handler import cancel_handler


@dp.message_handler(commands="autoparse", state=None)
@dp.message_handler(regexp="^(üõ† –ê–≤—Ç–æ-–ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã)$")
async def cm_stats(message: types.Message):
    await AutoparseFormState.name.set()
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏", reply_markup=await cancel_state_keyboard()
    )


@dp.message_handler(state=AutoparseFormState.name, content_types=["text"])
async def load_name(message: types.Message, state: FSMContext):
    logger.info("–í—ã–∑–≤–∞–Ω –ê–≤—Ç–æ-–ø–∞—Ä—Å–∏–Ω–≥")

    text = message.text

    if len(text.split()) == 1:
        group = text.split()[0]
        group_service = GroupService(Group)
        autoparsing_status = group_service.set_autoparsing_group(group)

        if autoparsing_status is None:
            text = "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"
        else:
            switch = "<b>–≤–∫–ª—é—á–µ–Ω</b>" if autoparsing_status else "<b>–≤—ã–∫–ª—é—á–µ–Ω</b>"
            text = f"–ê–≤—Ç–æ-–ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö {switch} —É –≥—Ä—É–ø–ø—ã: <b>{group}</b>"
    else:
        text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑"

    await message.answer(text=text, reply_markup=await main_keyboard())
    await state.finish()
